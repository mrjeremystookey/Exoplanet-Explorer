package r.stookey.exoplanetexplorer.domain


import androidx.room.ColumnInfo
import androidx.room.Entity
import androidx.room.PrimaryKey
import com.squareup.moshi.Json
import com.squareup.moshi.JsonClass


@JsonClass(generateAdapter = true)
@Entity(tableName = "planets-db")
data class Planet(
    //Generated by database for search
    @PrimaryKey(autoGenerate = true)
    @ColumnInfo(name = "planet_id")
    var planetID: Int? = null,

    //Planet name most commonly used in the literature
    @ColumnInfo(name = "planet_name")
    @Json(name = "pl_name")
    val planetName: String? = null,

    //Letter assigned to the planetary component of a planetary system
    @ColumnInfo(name = "planet_letter")
    @Json(name = "pl_letter")
    val planetLetter: String? = null,

    //Stellar name most commonly used in the literature
    @ColumnInfo(name = "hostname")
    @Json(name = "hostname")
    val hostname: String? = null,

    //Flag indicating whether the confirmation status of a planet has been questioned in the published literature (1=yes, 0=no)
    @ColumnInfo(name = "pl_controv_flag")
    @Json(name = "pl_controv_flag")
    val isPlanetControversial: Int? = null,

    //Year the planet was discovered
    @ColumnInfo(name = "discovery_year")
    @Json(name = "disc_year")
    val discoveryYear: String? = null,

    //Method by which the planet was first identified
    @ColumnInfo(name = "discovery_method")
    @Json(name = "discoverymethod")
    val discoveryMethod: String? = null,

    //Location of observation of planet discovery (Ground or Space)
    @ColumnInfo(name = "discovery_locale")
    @Json(name = "disc_locale")
    val discoveryLocale: String? = null,

    //Name of facility of planet discovery observations
    @ColumnInfo(name = "discovery_facility")
    @Json(name = "disc_facility")
    val discoveryFacility: String? = null,

    //Name of instrument of planet discovery observations
    @ColumnInfo(name = "discovery_instrument")
    @Json(name = "disc_instrument")
    val discoveryInstrument: String? = null,

    //Name of telescope of planet discovery observations
    @ColumnInfo(name = "discovery_telescope")
    @Json(name = "disc_telescope")
    val discoveryTelescope: String? = null,

    //Reference name for discovery publication
    @ColumnInfo(name = "discovery_reference_name")
    @Json(name = "disc_refname")
    val discoveryReference: String? = null,

    //Publication Date of the planet discovery referee publication
    @ColumnInfo(name = "discovery_publication_date")
    @Json(name = "disc_pubdate")
    val discoveryPublicationDate: String? = null,

    //Number of stars in the planetary system
    @ColumnInfo(name = "system_star_number")
    @Json(name = "sy_snum")
    val systemStarNumber: String? = null,

    //Number of planets in the planetary system
    @ColumnInfo(name = "system_planet_number")
    @Json(name = "sy_pnum")
    val systemPlanetNumber: String? = null,

    //Number of moons in the planetary system
    @ColumnInfo(name = "system_moon_number")
    @Json(name = "sy_mnum")
    val systemMoonNumber: String? = null,

    //Flag indicating whether the planet orbits a binary system (1=yes, 0=no)
    @ColumnInfo(name = "cb_flag")
    @Json(name = "cb_flag")
    val orbitsInBinarySystem: Int? = null,

    //Unit measured in days
    //Time the planet takes to make a complete orbit around the host star or system
    @ColumnInfo(name = "planetary_orbit_period")
    @Json(name = "pl_orbper")
    val planetaryOrbitPeriod: Double? = null,

    //Length of a line segment from the center of the planet to its surface, measured in units of radius of the Earth
    @ColumnInfo(name = "planetary_radius_earth")
    @Json(name = "pl_rade")
    val planetaryRadiusEarth: Double? = null,

    //Amount of matter contained in the planet, measured in units of masses of the Earth
    @ColumnInfo(name = "planetary_mass_earth")
    @Json(name = "pl_bmasse")
    val planetaryMassEarth: Double? = null,

    //Amount of matter contained in the planet, measured in units of masses of Jupiter
    @ColumnInfo(name = "planetary_mass_jupiter")
    @Json(name = "pl_bmassj")
    val planetaryMassJupiter: Double? = null,

    //Amount by which the orbit of the planet deviates from a perfect circle
    @ColumnInfo(name = "pl_orbeccen")
    @Json(name = "pl_orbeccen")
    val planetaryOrbitalEccentricity: Double? = null,

    //Angle of the plane of the orbit relative to the plane perpendicular to the line-of-sight from Earth to the object
    @ColumnInfo(name = "pl_orbincl")
    @Json(name = "pl_orbincl")
    val planetaryOrbitalInclination: String? = null,

    //Flag indicating if the planet host star exhibits radial velocity variations due to the planet (1=yes, 0=no)
    @ColumnInfo(name = "rv_flag")
    @Json(name = "rv_flag")
    val radialVelocityVariationsFlag: Int? = null,

    //Boolean flag indicating if the planet host star exhibits pulsar timing variations due to the planet (1=yes, 0=no)
    @ColumnInfo(name = "pul_flag")
    @Json(name = "pul_flag")
    val hostStarPulsarTimingVariationsFlag: Int? = null,

    //Boolean flag indicating if the planet host star exhibits pulsation timing variations due to the planet (1=yes, 0=no)
    @ColumnInfo(name = "ptv_flag")
    @Json(name = "ptv_flag")
    val hostStarPulsationTimingFlag: Int? = null,

    //Flag indicating if the planet transits its host star (1=yes, 0=no)
    @ColumnInfo(name = "tran_flag")
    @Json(name = "tran_flag")
    val transitsHostStarFlag: Int? = null,

    //Flag indicating if the planet host star exhibits astrometrical variations due to the planet (1=yes, 0=no)
    @ColumnInfo(name = "ast_flag")
    @Json(name = "ast_flag")
    val hostStarAstronomicalVariationsFlag: Int? = null,

    //Flag indicating whether the planet exhibits orbital modulations on the phase curve (1=yes, 0=no)
    @ColumnInfo(name = "obm_flag")
    @Json(name = "obm_flag")
    val exhibitsOrbitalModulationsOnPhaseCurve: Int? = null,

    //Boolean flag indicating if the planetary system acted as a lens during an observed microlensing event (1=yes, 0=no)
    @ColumnInfo(name = "micro_flag")
    @Json(name = "micro_flag")
    val planetActedAsLens: Int? = null,

    //Boolean flag indicating if the planet induces transit timing variations on the orbit of another another planet in the system (1=yes, 0=no)
    @ColumnInfo(name = "etv_flag")
    @Json(name = "etv_flag")
    val eclipseTimingVariations: Int? = null,

    //Flag indicating if the planet has been observed via imaging techniques (1=yes, 0=no)
    @ColumnInfo(name = "ima_flag")
    @Json(name = "ima_flag")
    val observedViaImagingTechniques: Int? = null,

    //Boolean flag indicating if the presence of the planet was inferred due to its kinematic influence on the protoplanetary disk of its host star (1=yes, 0=no)
    @ColumnInfo(name = "dkin_flag")
    @Json(name = "dkin_flag")
    val inferredDueToKinematicInfluence: Int? = null,

    //Reference of publication used for given planet parameter set
    @ColumnInfo(name = "pl_orbper_reflink")
    @Json(name = "pl_orbper_reflink")
    val orbitalPeriodReference: String? = null,

    //The longest radius of an elliptic orbit, or, for exoplanets detected via gravitational microlensing or direct imaging, the projected separation in the plane of the sky
    @ColumnInfo(name = "pl_orbsmax")
    @Json(name = "pl_orbsmax")
    val orbitSemiMajorAxis: Double? = null,

    //Orbit Semi-Major Axis Reference
    @ColumnInfo(name = "pl_orbsmax_reflink")
    @Json(name = "pl_orbsmax_reflink")
    val orbitSemiMajorAxisReference: String? = null,

    //Planet Radius Reference
    @ColumnInfo(name = "pl_rade_reflink")
    @Json(name = "pl_rade_reflink")
    val planetaryRadiusEarthReference: String? = null,

    //Planet Density
    @ColumnInfo(name = "pl_dens")
    @Json(name = "pl_dens")
    val planetDensity: Double? = null,

    //Planet Density Reference
    @ColumnInfo(name = "pl_dens_reflink")
    @Json(name = "pl_dens_reflink")
    val planetDensityReference: String? = null,

    //Planetary Mass reference
    @ColumnInfo(name = "pl_bmasse_reflink")
    @Json(name = "pl_bmasse_reflink")
    val planetaryMassEarthReference: String? = null,

    //The time given by the average of the time the planet begins to cross the stellar limb and the time the planet finishes crossing the stellar limb.
    @ColumnInfo(name = "pl_tranmid")
    @Json(name = "pl_tranmid")
    val planetaryTransitMidpoint: Double? = null,

    //The time given by the average of the time the planet begins to cross the stellar limb and the time the planet finishes crossing the stellar limb.
    @ColumnInfo(name = "pl_tranmid_reflink")
    @Json(name = "pl_tranmid_reflink")
    val planetaryTransitMidpointReference: String? = null,



    )

